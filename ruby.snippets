snippet desc "describe block"
describe '${1}' do
	${2}${VISUAL}
end${3}
endsnippet

snippet it "it block"
it '${1}' do
	${VISUAL}${2}
end${3}
endsnippet

snippet iit "inline it"
it { ${1}${VISUAL} }${2}
endsnippet

snippet before "before block"
before do
	${1}${VISUAL}
end${2}
endsnippet

snippet ibefore "inline before block"
before { ${1}${VISUAL} }${2}
endsnippet

snippet do "do block" ims
do${1}
	${VISUAL}$0
end
endsnippet

snippet def "def"
def ${1}
	${VISUAL}${2}
end$0
endsnippet

snippet ilet "inline let block"
let(:${1}) { ${2}${VISUAL} }${3}
endsnippet

snippet let "let block"
let(:${1}) do
	${2}${VISUAL}
end${3}
endsnippet

snippet p "puts"
puts ${1}
endsnippet

snippet pb "puts box" i
puts "-------------------"
puts ${1}${VISUAL}
puts "-------------------"
endsnippet

snippet class "class"
class ${1}
	${VISUAL}$0
end
endsnippet

snippet module "module"
module ${1}
	${VISUAL}$0
end
endsnippet

snippet init "initialize"
def initialize${1}
	${VISUAL}$0
end
endsnippet

snippet begin "begin block"
begin
	${VISUAL}$0
end
endsnippet

snippet rescue "rescue statement"
rescue ${1:StandardError}
	${VISUAL}$0
endsnippet

snippet if "if"
if ${1}
	${VISUAL}$2
end$0
endsnippet

snippet ll "live_loop :)"
live_loop :${1} do
	${VISUAL}${2}
end$0
endsnippet

snippet bp "binding.pry"
binding.pry$0
endsnippet

snippet raketask "rake task"
desc '${1}'
task ${2}: :environment do
	${VISUAL}${3}
end$0
endsnippet
